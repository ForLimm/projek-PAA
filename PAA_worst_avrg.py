# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cnR2S5xfg45rgzEn8K0NLRnEV6ClCsOW
"""

import random
import time
import matplotlib.pyplot as plt

# Function to generate an array with n random elements and a specific maximum value
def generate_array(n, max_value, seed=0):
    random.seed(seed)
    return [random.randint(1, max_value) for _ in range(n)]

# Function to check if all elements in the array are unique
def is_unique(array):
    return len(array) == len(set(array))

# Measure execution time for is_unique function
def measure_execution_time(array):
    start_time = time.time()
    is_unique(array)
    end_time = time.time()
    return end_time - start_time

# Main variables
n_values = [100, 150, 200, 250, 300, 350, 400, 500]
last_three_digits = 12  # Last three digits of your stambuk
max_value = 250 - last_three_digits
seed = 42

# Storage for results
execution_times = {"worst_case": [], "average_case": []}

# Measure times for each n
for n in n_values:
    array = generate_array(n, max_value, seed)

    # Worst case: When all elements are unique
    worst_case_time = measure_execution_time(array)
    execution_times["worst_case"].append(worst_case_time)

    # Average case: Measure multiple times and calculate the average
    average_times = [measure_execution_time(generate_array(n, max_value, i)) for i in range(5)]
    average_case_time = sum(average_times) / len(average_times)
    execution_times["average_case"].append(average_case_time)

# Save results to a text file
with open("worst_avg.txt", "w") as file:
    file.write("n\tworst_case\taverage_case\n")
    for i, n in enumerate(n_values):
        file.write(f"{n}\t{execution_times['worst_case'][i]:.6f}\t{execution_times['average_case'][i]:.6f}\n")

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(n_values, execution_times["worst_case"], label="Worst Case", marker="o")
plt.plot(n_values, execution_times["average_case"], label="Average Case", marker="x")
plt.title("Execution Time Analysis")
plt.xlabel("Array Size (n)")
plt.ylabel("Time (seconds)")
plt.legend()
plt.grid()
plt.savefig("execution_time_analysis.jpg")
plt.show()